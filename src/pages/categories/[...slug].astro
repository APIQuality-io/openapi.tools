---
import type { GetStaticPaths } from 'astro';
import { getCollection, getEntry } from 'astro:content';

import PageHeader from '@/components/PageHeader.astro';
import { DataTable } from '@/components/table/DataTable';
import { ToolColumns } from '@/components/table/ToolColumns';
import Layout from '../../layouts/Layout.astro';

// 1. Generate a new path for every collection entry
export const getStaticPaths: GetStaticPaths = async () => {
  const categories = await getCollection('categories');
  return categories.map((category) => ({
    params: { slug: category.slug },
    props: { category },
  }));
};

// 2. For your template, you can get the entry directly from the prop
const { slug } = Astro.params;
const category = await getEntry('categories', slug as string);

if (!category) {
  throw new Error(`No category found for slug ${slug}`);
}

const { Content } = await category.render();

// 3 get entries for this category from the Tools collection
const allTools = (await getCollection('tools')).filter((tool) => {
  if (!tool.data.categories) {
    return false;
  }
  const categories = tool.data.categories;
  // look through the categories list to see if any of the categories matches enry.slug
  return categories.some((cat) => cat.slug === category.slug);
});

// get all the sponsored tools
const sponsoredTools = allTools
  .filter((tool) => tool.data.sponsorship)
  .sort((a, b) => {
    // sort sponsored tools by start date
    if (!a.data.sponsorship || !b.data.sponsorship) {
      return 0;
    }
    const aDate = new Date(a.data.sponsorship.startDate);
    const bDate = new Date(b.data.sponsorship.startDate);
    return aDate.getTime() - bDate.getTime();
  });

// get all the tools that are not sponsored
const nonSponsoredTools = allTools
  .filter((tool) => !tool.data.sponsorship)
  .sort((a, b) => {
    return a.data.name.localeCompare(b.data.name);
  });

const tools = [...sponsoredTools, ...nonSponsoredTools];

const toolCount = tools.length;

const toolsData = tools.map((tool) => ({
  category: category.data,
  tool: tool.data,
  slug: tool.slug,
}));
---

<Layout title={category.data.name}>
  <PageHeader
    title={category.data.name}
    description={category.data.description}
  >
    {/* render the body of the markdown file for this category */}
    <div
      class="prose prose-lg dark:prose-invert prose-headings:text-slate-700/90 dark:prose-headings:text-slate-300"
    >
      <Content />
    </div>
  </PageHeader>

  <main
    class="prose-lg w-full dark:prose-invert prose-headings:text-slate-700/90 dark:prose-headings:text-slate-300"
  >
    <h2 class="prose mb-4 text-2xl font-bold">
      {toolCount}
      {category.data.name}
    </h2>
    <section class="prose w-full max-w-none">
      <DataTable data={toolsData} columns={ToolColumns} />
    </section>
  </main>
</Layout>
